<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>9</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>450</x>
      <y>0</y>
      <w>261</w>
      <h>198</h>
    </coordinates>
    <panel_attributes>Intnode
--
-nodeData : int
-nodePointer : Intnode *

--
+ getNodeData() : int
+ getNodePointer() : IntNode*
+ setNodeData(int) : void
+ setnodePointer(IntNode*) : void

+ IntNode() : constructor
+ IntNode(int) : constructor
+ Intnode(int, IntNode*) : constructor

bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>153</x>
      <y>0</y>
      <w>243</w>
      <h>153</h>
    </coordinates>
    <panel_attributes>IntNodeArray
-
- head : IntNode*
- size : int
-
+ IntNodeArray(int) : constructor
+ getSize() : int
+ getFromIndex(int) : int
+ setAtIndex(int, int value) : void
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>162</x>
      <y>234</y>
      <w>216</w>
      <h>162</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
-


-
bg=cyan</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>387</x>
      <y>90</y>
      <w>81</w>
      <h>27</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>459</x>
      <y>225</y>
      <w>432</w>
      <h>252</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
--
- front : Node&lt;Type&gt; *
- size : int

--
+Array() : default constructor
+ Array&lt;Type&gt;(int size) : constructor

+~Array&lt;Type&gt;() : deconstructor
+Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied) : copy constructor

+ getSize() : int
+ getFront() const : Node&lt;Type&gt;*

+ getFromIndex(int index) : Type
+ setAtIndex(int index, Type value) : void
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>369</x>
      <y>252</y>
      <w>108</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m2=1..n
bg=black</panel_attributes>
    <additional_attributes>100.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>459</x>
      <y>522</y>
      <w>414</w>
      <h>279</h>
    </coordinates>
    <panel_attributes>Model :: List&lt;Type&gt;
--
- size : int
- front : Node&lt;Type&gt;*

--
+List&lt;Type&gt;() : constructor
+List&lt;Type&gt;(sonst List&lt;Type&gt; &amp; source) : copy constructor
+ ~List&lt;Type&gt;() : deconstructor

+ addAtIndex(int index, Type value) : void
+ add(Type value) : void
+ remove(int index) : Type
+ setAtIndex(int index, Type data) : Type
+ getFromIndex(int index) : Type
+ contains(Type data) : bool
+ getSize() const : int
+ getFront() const : node&lt;Type&gt; *
+ getEnd() const : Node&lt;Type&gt; *
bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>306</x>
      <y>387</y>
      <w>342</w>
      <h>153</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m2=0..n
bg=black</panel_attributes>
    <additional_attributes>360.0;150.0;360.0;110.0;10.0;110.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>225</x>
      <y>387</y>
      <w>27</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;140.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>144</x>
      <y>513</y>
      <w>279</w>
      <h>225</h>
    </coordinates>
    <panel_attributes>BiDirectionalNode&lt;Type&gt;
--
- nodeData : Type
-nextPointer : BiDirectionalNode&lt;Type&gt; * 
-previousPointer : BiDirectionalNode&lt;Type&gt; *

--
+ 
bg=light_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>432</x>
      <y>837</y>
      <w>171</w>
      <h>27</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;170.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>801</y>
      <w>441</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>DoublyLinkedList&lt;Type&gt;
-
front : BiDirectionsalNode&lt;Type&gt;
end : BiDirectionalNode&lt;Type&gt; *
size : int
-
non virtual methods
+ getSize() const : int
+ getFront() const : BiDirectionalNode&lt;Type&gt; *
+ getEnd() const : BiDirectionalNode&lt;Type&gt; * 

virtual methods
add(Type value)
remove(int)
bg=yellow</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>585</x>
      <y>837</y>
      <w>405</w>
      <h>216</h>
    </coordinates>
    <panel_attributes>Model :: Queue&lt;Type&gt;
-
- front: BiDirectionalNode&lt;Type&gt; *
- end: BiDirectionalNode&lt;Type&gt; * 
- size : int
-
+ Queue() : constructor
+ ~Queue() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ enqueue(Type data) : void
+ dequeue() : Type
+ peek() : Type
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1413</x>
      <y>1179</y>
      <w>396</w>
      <h>153</h>
    </coordinates>
    <panel_attributes>Model :: CircularList&lt;Type&gt;
-
- front: BiDirectionalNode&lt;Type&gt; *
- end: BiDirectionalNode&lt;Type&gt; * 
- size : int
-</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>999</x>
      <y>1044</y>
      <w>405</w>
      <h>216</h>
    </coordinates>
    <panel_attributes>Model :: Stack&lt;Type&gt;
-
- front: BiDirectionalNode&lt;Type&gt; *
- end: BiDirectionalNode&lt;Type&gt; * 
- size : int
-</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>432</x>
      <y>1053</y>
      <w>999</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;80.0;10.0;110.0;40.0;110.0;180.0;1090.0;180.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>432</x>
      <y>936</y>
      <w>585</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;20.0;90.0;40.0;110.0;100.0;140.0;140.0;630.0;140.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1017</x>
      <y>720</y>
      <w>405</w>
      <h>216</h>
    </coordinates>
    <panel_attributes>BinarySearchTreeNode&lt;Type&gt;
-
- nodeData: Type(inherited)
- rootPointer : TreeNode&lt;Type&gt; * 
- leftChildPointer : BinarySearchTreeNode&lt;Type&gt; *
- rightChildPointer : BinarySearchTreeNode&lt;Type&gt; *
-
+ getRootPointer(): BinarySEarchTreeNode&lt;Type&gt; *
+ getLeftChildPointer() : BinarySearchTreeNode&lt;Type&gt; * 
+ getRightChildPointer() : BinarySearchTreeNode&lt;Type&gt; *

+ setRootChildPointer(BinarySearcchTreeNode&lt;Type&gt; *root) : void
+ setLeftChildPointer(BinarySearcchTreeNode&lt;Type&gt; *left) : void
+ setRightChildPointer(BinarySearcchTreeNode&lt;Type&gt; *right) : void

bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1944</x>
      <y>693</y>
      <w>405</w>
      <h>279</h>
    </coordinates>
    <panel_attributes>Model :: Tree&lt;Type&gt;
-
- size : int
- height : int
- complete : bool
- balanced : bool
-
+ getSize() : int
+ getHeight() : int
+ isComplete() : bool
+ isBalanced() : bool

+ setSize(int size) : void
+ setHeight(int height) : void
+ setComplete(bool complete) : void
+ setBalanced(bool balanced) : void

+ inOrderTraversal() : void
+ preOrderTraversal() : void
+ postOrderTraveral() : void
bg=cyan</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1485</x>
      <y>900</y>
      <w>405</w>
      <h>216</h>
    </coordinates>
    <panel_attributes>Model :: BinarySearchTreeNode&lt;Type&gt;
-
- rootPointer : TreeNode&lt;Type&gt; * 
- size : int(inherited)
- height : int(inherited)
- complete : bool (inherited)
- balanced : bool (inherited)
-
+ BinarySearchTree() : constructor
+ ~BinarySearchTree() : destructor

+ getRoot() : BinarySearrchTreeNode&lt;Type&gt; *
+ setRoot(BinarySearchTreeNode&lt;Type&gt; *root) : void

+ calculateSize(BinarySearchTreeNode&lt;Type&gt;*) : int

+ inOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
+ preOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
+ postOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void

bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1413</x>
      <y>792</y>
      <w>144</w>
      <h>126</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m2=0..n
bg=black</panel_attributes>
    <additional_attributes>10.0;10.0;140.0;120.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1764</x>
      <y>783</y>
      <w>198</w>
      <h>135</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-

bg=black</panel_attributes>
    <additional_attributes>200.0;10.0;10.0;130.0</additional_attributes>
  </element>
</diagram>
