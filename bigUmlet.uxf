<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>6</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>300</x>
      <y>0</y>
      <w>174</w>
      <h>132</h>
    </coordinates>
    <panel_attributes>Intnode
--
-nodeData : int
-nodePointer : Intnode *

--
+ getNodeData() : int
+ getNodePointer() : IntNode*
+ setNodeData(int) : void
+ setnodePointer(IntNode*) : void

+ IntNode() : constructor
+ IntNode(int) : constructor
+ Intnode(int, IntNode*) : constructor

bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>102</x>
      <y>0</y>
      <w>162</w>
      <h>102</h>
    </coordinates>
    <panel_attributes>IntNodeArray
-
- head : IntNode*
- size : int
-
+ IntNodeArray(int) : constructor
+ getSize() : int
+ getFromIndex(int) : int
+ setAtIndex(int, int value) : void
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>108</x>
      <y>156</y>
      <w>144</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
-


-
bg=cyan</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>258</x>
      <y>60</y>
      <w>54</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>306</x>
      <y>150</y>
      <w>288</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
--
- front : Node&lt;Type&gt; *
- size : int

--
+Array() : default constructor
+ Array&lt;Type&gt;(int size) : constructor

+~Array&lt;Type&gt;() : deconstructor
+Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied) : copy constructor

+ getSize() : int
+ getFront() const : Node&lt;Type&gt;*

+ getFromIndex(int index) : Type
+ setAtIndex(int index, Type value) : void
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>246</x>
      <y>168</y>
      <w>72</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m2=1..n
bg=black</panel_attributes>
    <additional_attributes>100.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>306</x>
      <y>348</y>
      <w>276</w>
      <h>186</h>
    </coordinates>
    <panel_attributes>Model :: List&lt;Type&gt;
--
- size : int
- front : Node&lt;Type&gt;*

--
+List&lt;Type&gt;() : constructor
+List&lt;Type&gt;(sonst List&lt;Type&gt; &amp; source) : copy constructor
+ ~List&lt;Type&gt;() : deconstructor

+ addAtIndex(int index, Type value) : void
+ add(Type value) : void
+ remove(int index) : Type
+ setAtIndex(int index, Type data) : Type
+ getFromIndex(int index) : Type
+ contains(Type data) : bool
+ getSize() const : int
+ getFront() const : node&lt;Type&gt; *
+ getEnd() const : Node&lt;Type&gt; *
bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>204</x>
      <y>258</y>
      <w>228</w>
      <h>102</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m2=0..n
bg=black</panel_attributes>
    <additional_attributes>360.0;150.0;360.0;110.0;10.0;110.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>150</x>
      <y>258</y>
      <w>18</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;140.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>96</x>
      <y>342</y>
      <w>186</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>BiDirectionalNode&lt;Type&gt;
--
- nodeData : Type
-nextPointer : BiDirectionalNode&lt;Type&gt; * 
-previousPointer : BiDirectionalNode&lt;Type&gt; *

--
+ 
bg=light_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>288</x>
      <y>558</y>
      <w>114</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;170.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>534</y>
      <w>294</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>DoublyLinkedList&lt;Type&gt;
-
front : BiDirectionsalNode&lt;Type&gt;
end : BiDirectionalNode&lt;Type&gt; *
size : int
-
non virtual methods
+ getSize() const : int
+ getFront() const : BiDirectionalNode&lt;Type&gt; *
+ getEnd() const : BiDirectionalNode&lt;Type&gt; * 

virtual methods
add(Type value)
remove(int)
bg=yellow</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>390</x>
      <y>558</y>
      <w>270</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>Model :: Queue&lt;Type&gt;
-
- front: BiDirectionalNode&lt;Type&gt; *
- end: BiDirectionalNode&lt;Type&gt; * 
- size : int
-
+ Queue() : constructor
+ ~Queue() : destructor

+ add(Type data) : void
+ remove(int index) : Type

+ enqueue(Type data) : void
+ dequeue() : Type
+ peek() : Type
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>942</x>
      <y>786</y>
      <w>264</w>
      <h>102</h>
    </coordinates>
    <panel_attributes>Model :: CircularList&lt;Type&gt;
-
- front: BiDirectionalNode&lt;Type&gt; *
- end: BiDirectionalNode&lt;Type&gt; * 
- size : int
-</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>666</x>
      <y>696</y>
      <w>270</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>Model :: Stack&lt;Type&gt;
-
- front: BiDirectionalNode&lt;Type&gt; *
- end: BiDirectionalNode&lt;Type&gt; * 
- size : int
-</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>288</x>
      <y>702</y>
      <w>666</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;80.0;10.0;110.0;40.0;110.0;180.0;1090.0;180.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>288</x>
      <y>624</y>
      <w>390</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;20.0;90.0;40.0;110.0;100.0;140.0;140.0;630.0;140.0</additional_attributes>
  </element>
</diagram>
